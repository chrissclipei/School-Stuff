import java.io.*;
import java.util.regex.*;
import java.util.ArrayList;

class CheckHW4 {


    // Convenient method to print error message and exit
    // Input: String message to be printed
    // Output: void, simply exits program

    private static void errExit(String message) {

        System.err.println(message);
        System.exit(1);
    }



    private static boolean checkPieceValid(String piece) {
        boolean valid = false;
        if (piece.equals("K") || piece.equals("k"))
            valid = true;
        if (piece.equals("Q") || piece.equals("q"))
            valid = true;
        if (piece.equals("B") || piece.equals("b"))
            valid = true;
        if (piece.equals("R") || piece.equals("r"))
            valid = true;
        if (piece.equals("N") || piece.equals("n"))
            valid = true;
        if (piece.equals("P") || piece.equals("p"))
            valid = true;
        if (piece.equals("-"))
            valid = true;
        return valid;
    }


    private static boolean checkLocValid(String loc) {
        boolean valid = false;
        if (loc.equals("1") || loc.equals("2"))
            valid = true;
        if (loc.equals("3") || loc.equals("4"))
            valid = true;
        if (loc.equals("5") || loc.equals("6"))
            valid = true;
        if (loc.equals("7") || loc.equals("8"))
            valid = true;
        return valid;
    }

    // Method to check if validity line is valid
    // Input: line
    // Output: boolean, if the validity line is valid, returns true

    private static boolean checkIfValidInput(String line) {
        line = line.trim();
        boolean valid = false;
        String[] parts = line.split(" ");
        if (line.equals("No solution"))
            valid = true;
        if (parts.length == 5){
            boolean piecevalid = checkPieceValid(parts[0]);
            boolean startvalid = checkLocValid(parts[1]) && checkLocValid(parts[2]); 
            boolean endvalid = checkLocValid(parts[3]) && checkLocValid(parts[4]); 
            if (piecevalid && startvalid && endvalid) 
                valid = true;
        } 
        return valid;
    }


    // Method to read the solution from solution.txt generated by your program
    // Input: Filename passed via command line agrument
    // Output: boolean, it comes handy to say whether a particular case passed or not

    private static boolean readFromSolutionFile(String file) {

        // ready the arguments before reading
        int count = 1;

        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            while ((line = reader.readLine()) != null) {
                boolean valid = checkIfValidInput(line);
                if (valid) {
                    System.out.println("Case " + count+ " passed");
                } else {
                    System.out.println("Case " + count+ " failed");
                }
                count++;                   
            }
            reader.close();

            
        }
        catch (IndexOutOfBoundsException e) {
            errExit("Array index is out of bounds"); // throw error when inserting elements into arrays fail
        }
        catch (Exception e) {
            errExit("Exception occurred trying to read file"); // throw a generic exception if failure to read occurs
        }
        return true;
    }


    // Main method
    // Input: filename as command line argument
    // Output: void

    public static void main(String[] args) {
        File f_jar = new File("ChessPuzzle.jar");
        if (!f_jar.exists()) 
            errExit("Note: No file names ChessPuzzle.jar");
        File f_dir = new File("../HW4");
        if (!f_dir.exists()) 
            errExit("Note: Directory not named HW4");
        try {
            Process proc = Runtime.getRuntime().exec(new String[]{"java", "-jar", "Chessmoves.jar"});
            BufferedReader reader =
                new BufferedReader(new InputStreamReader(proc.getInputStream()));
            while ((reader.readLine()) != null) {}
            proc.waitFor();
          }
          catch(Exception e) {
            errExit("Student's program thows an exception: " + e);
          }
     
          // call the respective methods to read from file and display the chessboard
          readFromSolutionFile("solution.txt");
    }

}

